#!/bin/bash

# This Laminar bash script is meant to be *sourced* at the start of a 
# Laminar run. It sets up a number of "standard" environment variables for 
# use in other scrpits. 

# NOTE we run laminar scripts with set -e (exit immediately on errors) 

# Capture the current directory as the RUNDIR
#
export LAMINAR_RUNDIR=$PWD

# Setup the Laminar results file
#
export LRESULTS_FILE=$LAMINAR_RUNDIR/laminarRunResults
#
# Create an empty successful results files
#
rm -rf $LRESULTS_FILE ; date > $LRESULTS_FILE

# record the Laminar variables
#
export LAMINAR_VARS=$LAMINAR_RUNDIR/reSourceLaminarVars
#
rm -rf $LAMINAR_VARS
cat <<LAMINAR_FUNCTIONS > $LAMINAR_VARS
set -e
set +x
# This Laminar bash function records an environment variable in the 
# \$LAMINAR_VARS file.
#
function recordVar {
  varName=\$1
  shift
  echo "export \$varName=\"\$*\"" >> \$LAMINAR_VARS
  echo "export \$varName=\"\$*\""
  source \$LAMINAR_VARS
}
#
# This Laminar bash function records an comment in the 
# \$LAMINAR_VARS file.
#
function recordComment {
  echo "# \$*" >> \$LAMINAR_VARS
}
#
# This Laminar bash function runs an other bash script and exits the 
# script if the sub-bash script fails. 
#
function failResult {
  CMD=\$*
  echo "------------------------------------------------------------"
  echo failResult: \$CMD
  echo "------------------------------------------------------------"
  set -e
  \$CMD
  echo "------------------------------------------------------------"
  CMD_RESULT=\$?
  if test \$CMD_RESULT -ne 0 ; then
    echo "FAILURE: \$CMD" >> \$LRESULTS_FILE
    exit \$CMD_RESULT
  fi
}
#
# This Laminar bash function runs an other bash script and records its 
# success or failure in a results file for later reporting (and potential 
# failure). 
#
function acceptResult {
  set +e
  CMD=\$*
  echo "------------------------------------------------------------"
  echo acceptResult: \$CMD
  echo "------------------------------------------------------------"
  \$CMD
  echo "------------------------------------------------------------"
  CMD_RESULT=\$?
  set -e
  if test \$CMD_RESULT -eq 0 ; then
    echo "SUCCESS: \$CMD" >> \$LRESULTS_FILE
  else
    echo "FAILURE: \$CMD" >> \$LRESULTS_FILE
  fi
}
#
# This Laminar bash function reports the LRESULTS_FILE and exists with an 
# non-zero error code if any result failed. 
#
function reportResults {
  date >> \$LRESULTS_FILE
  #
  # Let the user know what the testOutputResults were
  #
  echo ""
  echo "-------------------------------------------------------"
  echo "Laminar \$JOB/\$RUN results:"
  echo "-------------------------------------------------------"
  cat \$LRESULTS_FILE
  echo "-------------------------------------------------------"
  echo ""
  #
  # fail the script IF we find the work 'FAILURE' in the testOutputResults
  #
  if grep FAILURE \$LRESULTS_FILE ; then 
    exit 1
  fi
}
#
# This Luminar bash runction runs a docker run command in a specified 
# docker container with no changes in user or workDir.
#
function baseDocker {
  echo "-------------------------------------------------------"
  echo baseDocker:
  echo docker run --rm                 \
    -v /etc/timezone:/etc/timezone     \
    -v \$LAMINAR_HOME:\$LAMINAR_HOME   \
    \$*
  echo "-------------------------------------------------------"
  #
  docker run --rm                    \
    -v /etc/timezone:/etc/timezone   \
    -v \$LAMINAR_HOME:\$LAMINAR_HOME \
    \$*
  echo "-------------------------------------------------------"
}
#
export BASE_DOCKER="docker run --rm -v /etc/timezone:/etc/timezone -v \$LAMINAR_HOME:\$LAMINAR_HOME "
#
# This Luminar bash runction runs a docker run command in a specified 
# docker container AND runs as the *root* user. 
#
function rootDocker {
  echo "-------------------------------------------------------"
  echo rootDocker:
  echo docker run --rm                 \
    -v /etc/timezone:/etc/timezone     \
    -v \$LAMINAR_HOME:\$LAMINAR_HOME   \
    -v \$PWD:/root                     \
    -w /root                           \
    \$*
  echo "-------------------------------------------------------"
  #
  docker run --rm                    \
    -v /etc/timezone:/etc/timezone   \
    -v \$LAMINAR_HOME:\$LAMINAR_HOME \
    -v \$PWD:/root                   \
    -w /root                         \
    \$*
  echo "-------------------------------------------------------"
}
#
export ROOT_DOCKER="docker run --rm -v /etc/timezone:/etc/timezone -v \$LAMINAR_HOME:\$LAMINAR_HOME -v \$PWD:/root -w /root "
#
# This Luminar bash function runs a docker run command in a specified 
# docker container AND runs as the *dev* user. 
#
function devDocker {
  echo "-------------------------------------------------------"
  echo devDocker:
  echo docker run --rm                 \
    -v /etc/timezone:/etc/timezone     \
    -v \$LAMINAR_HOME:\$LAMINAR_HOME   \
    -v \$PWD:/home/dev                 \
    -u dev:dev                         \
    -w "/home/dev"                     \
    \$*
  echo "-------------------------------------------------------"
  #
  docker run --rm                    \
    -v /etc/timezone:/etc/timezone   \
    -v \$LAMINAR_HOME:\$LAMINAR_HOME \
    -v \$PWD:/home/dev               \
    -u dev:dev                       \
    -w "/home/dev"                   \
    \$*
  echo "-------------------------------------------------------"
}
#
export DEV_DOCKER="docker run --rm -v /etc/timezone:/etc/timezone -v \$LAMINAR_HOME:\$LAMINAR_HOME -v \$PWD:/home/dev -u dev:dev -w /home/dev "
#
######################################################################
# Now record the exported variables
#
LAMINAR_FUNCTIONS

source $LAMINAR_VARS

recordVar LAMINAR_RUNDIR $LAMINAR_RUNDIR
recordVar LAMINAR_VARS $LAMINAR_VARS
recordVar CONTEXT $CONTEXT
recordVar JOB $JOB
recordVar RUN $RUN
recordVar ARCHIVE $ARCHIVE
recordVar WORKSPACE $WORKSPACE
recordVar PWORKSPACE $PWORKSPACE
recordVar DIST $DIST
recordVar LRESULTS_FILE $LRESULTS_FILE
recordComment
